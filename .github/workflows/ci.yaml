name: CI Terraform

on:
  push:
    branches: ["master", "teste"]
  pull_request:
    branches: ["master", "teste"]

env:
  TF_VERSION: "1.6.0"
  TF_WORKDIR: "environments/default"

jobs:
  # ------------------------------------------
  # 1) Verifica formatação e validação do Terraform
  # ------------------------------------------
  terraform-lint:
    name: "Terraform Format & Validate"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform - fmt check
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform fmt -check -recursive

      - name: Terraform - validate
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          terraform init -input=false -backend=false
          terraform validate

  # ------------------------------------------
  # 2) Deploy (terraform apply) — só em main
  #    Só roda se “terraform-lint” tiver passado
  # ------------------------------------------
  deploy:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: terraform-lint
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure GCP credentials
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > "$HOME/gcp-key.json"
          gcloud auth activate-service-account --key-file="$HOME/gcp-key.json"
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          export GOOGLE_APPLICATION_CREDENTIALS="$HOME/gcp-key.json"

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform apply -auto-approve
      - name: Terraform Output
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform output -json > output.json